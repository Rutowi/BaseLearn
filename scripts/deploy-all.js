const { ethers } = require("hardhat");

async function main() {
  console.log("üè™ D√©ploiement complet de l'√©cosyst√®me Base Learn...");
  
  const [deployer] = await ethers.getSigners();
  console.log("üìù D√©ploiement avec le compte :", deployer.address);
  
  const balance = await ethers.provider.getBalance(deployer.address);
  console.log("üí∞ Solde du compte :", ethers.formatEther(balance), "ETH");
  
  const network = await ethers.provider.getNetwork();
  console.log("üåê R√©seau :", network.name, "Chain ID :", network.chainId.toString());
  
  const deployedContracts = {};
  
  // 1. D√©ployer HelloWorld
  console.log("\n1Ô∏è‚É£ D√©ploiement de HelloWorld...");
  const HelloWorld = await ethers.getContractFactory("HelloWorld");
  const helloWorld = await HelloWorld.deploy("Hello, Base Learn! üöÄ");
  await helloWorld.waitForDeployment();
  deployedContracts.HelloWorld = await helloWorld.getAddress();
  console.log("‚úÖ HelloWorld d√©ploy√© √† :", deployedContracts.HelloWorld);
  
  // 2. D√©ployer BaseLearnToken
  console.log("\n2Ô∏è‚É£ D√©ploiement de BaseLearnToken...");
  const BaseLearnToken = await ethers.getContractFactory("BaseLearnToken");
  const token = await BaseLearnToken.deploy();
  await token.waitForDeployment();
  deployedContracts.BaseLearnToken = await token.getAddress();
  console.log("‚úÖ BaseLearnToken d√©ploy√© √† :", deployedContracts.BaseLearnToken);
  
  // 3. D√©ployer BaseLearnNFT
  console.log("\n3Ô∏è‚É£ D√©ploiement de BaseLearnNFT...");
  const BaseLearnNFT = await ethers.getContractFactory("BaseLearnNFT");
  const nft = await BaseLearnNFT.deploy();
  await nft.waitForDeployment();
  deployedContracts.BaseLearnNFT = await nft.getAddress();
  console.log("‚úÖ BaseLearnNFT d√©ploy√© √† :", deployedContracts.BaseLearnNFT);
  
  // Interactions de test
  console.log("\nüß™ Tests d'interaction...");
  
  // Test HelloWorld
  const message = await helloWorld.getMessage();
  console.log("üì¢ Message HelloWorld :", message);
  
  // Test Token
  const [tokenName, tokenSymbol, , tokenSupply] = await token.getTokenInfo();
  console.log("ü™ô Token :", tokenName, "(" + tokenSymbol + ")");
  console.log("üí∞ Supply actuelle :", ethers.formatEther(tokenSupply), "BLT");
  
  // Test NFT
  const totalNFTs = await nft.getTotalCertificates();
  console.log("üé® Total NFTs √©mis :", totalNFTs.toString());
  
  // R√©compenser l'utilisateur avec des tokens pour le module 1
  console.log("\nüéÅ Attribution de r√©compense pour le module 1...");
  try {
    await token.rewardStudent(deployer.address, 1);
    const newBalance = await token.balanceOf(deployer.address);
    console.log("‚úÖ R√©compense attribu√©e ! Nouveau solde :", ethers.formatEther(newBalance), "BLT");
  } catch (error) {
    console.log("‚ö†Ô∏è Erreur lors de l'attribution de r√©compense :", error.message);
  }
  
  // √âmettre un certificat NFT
  console.log("\nüèÜ √âmission de certificat NFT...");
  try {
    const tx = await nft.issueCertificate(deployer.address, 1, "Gold");
    await tx.wait();
    const newTotal = await nft.getTotalCertificates();
    console.log("‚úÖ Certificat √©mis ! Total NFTs :", newTotal.toString());
  } catch (error) {
    console.log("‚ö†Ô∏è Erreur lors de l'√©mission du certificat :", error.message);
  }
  
  // Sauvegarder les informations de d√©ploiement
  const deploymentInfo = {
    network: network.name,
    chainId: network.chainId.toString(),
    deployer: deployer.address,
    timestamp: new Date().toISOString(),
    contracts: deployedContracts,
    gasUsed: {
      // Ces valeurs seront approximatives
      HelloWorld: "~400,000",
      BaseLearnToken: "~1,200,000",
      BaseLearnNFT: "~2,500,000"
    }
  };
  
  const fs = require("fs");
  const filename = `deployment-${network.name}-${Date.now()}.json`;
  fs.writeFileSync(filename, JSON.stringify(deploymentInfo, null, 2));
  
  console.log("\nüìã R√©sum√© du d√©ploiement :");
  console.log("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
  console.log("‚îÇ Contrat             ‚îÇ Adresse                                      ‚îÇ");
  console.log("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
  console.log(`‚îÇ HelloWorld          ‚îÇ ${deployedContracts.HelloWorld}   ‚îÇ`);
  console.log(`‚îÇ BaseLearnToken      ‚îÇ ${deployedContracts.BaseLearnToken}   ‚îÇ`);
  console.log(`‚îÇ BaseLearnNFT        ‚îÇ ${deployedContracts.BaseLearnNFT}   ‚îÇ`);
  console.log("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
  
  console.log("\nüîç Pour v√©rifier les contrats :");
  console.log(`npx hardhat verify --network ${network.name} ${deployedContracts.HelloWorld} "Hello, Base Learn! üöÄ"`);
  console.log(`npx hardhat verify --network ${network.name} ${deployedContracts.BaseLearnToken}`);
  console.log(`npx hardhat verify --network ${network.name} ${deployedContracts.BaseLearnNFT}`);
  
  console.log("\nüìÑ Informations sauvegard√©es dans :", filename);
  
  console.log("\nüéâ D√©ploiement complet termin√© ! Tu peux maintenant :");
  console.log("   ‚Ä¢ Interagir avec tes contrats sur BaseScan");
  console.log("   ‚Ä¢ Commencer les modules d'apprentissage");
  console.log("   ‚Ä¢ D√©velopper ton frontend");
  console.log("   ‚Ä¢ Partager tes cr√©ations avec la communaut√© !");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erreur lors du d√©ploiement complet :", error);
    process.exit(1);
  });